name: Server Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: "The version to release"
        type: string

permissions:
  contents: write
  pull-requests: read
  statuses: write
  packages: write

concurrency:
  group: server-release-${{ github.ref }}
  cancel-in-progress: true

env:
  TUIST_CONFIG_TOKEN: ${{ secrets.TUIST_CONFIG_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.TUIST_GITHUB_TOKEN }}
  MISE_SOPS_AGE_KEY: ${{ secrets.MISE_SOPS_AGE_KEY }}
  MISE_EXPERIMENTAL: "1"
  PNPM_HOME: ~/.pnpm

jobs:
  release:
    name: Release Server
    runs-on: namespace-profile-default
    timeout-minutes: 60
    if: ${{ !contains(github.event.head_commit.message, '[Release] Tuist Server') }}
    defaults:
      run:
        working-directory: server
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TUIST_GITHUB_TOKEN }}
      - name: Restore Mix Cache
        uses: actions/cache@v3
        id: mix-cache
        with:
          path: |
            deps
            _build
            _site
          key: mix-${{ hashFiles('mix.lock') }}
      - name: Restore PNPM Cache
        uses: actions/cache@v3
        id: pnpm-cache
        with:
          path: |
            ~/.pnpm/store
          key: pnpm-${{ hashFiles('pnpm-lock.yaml') }}
      - uses: tuist/mise-action@18966898ea274fb74c1d7cf9cc1758fe0d9ddc7e
        with:
          version: 2025.7.0
          experimental: true

      - name: Check if there are releasable changes
        id: is-releasable
        run: |
          # Check for unreleased changes
          # Check if server@0.1.0 tag exists
          if git rev-parse server@0.1.0 >/dev/null 2>&1; then
            unreleased_changes=$(git cliff --include-path "server/**/*" --config cliff.toml --repository "../" --unreleased -- server@0.1.0..HEAD 2>/dev/null)
          else
            unreleased_changes=$(git cliff --include-path "server/**/*" --config cliff.toml --repository "../" --unreleased 2>/dev/null)
          fi
          
          echo "Checking for unreleased changes..."
          echo "Unreleased changes:"
          echo "${unreleased_changes}"
          
          # Check if there are any unreleased changes
          # git cliff returns empty output when there are no unreleased changes
          if [ -n "${unreleased_changes}" ] && [ "${unreleased_changes}" != "" ]; then
            echo "Found releasable changes"
            echo "should-release=true" >> $GITHUB_ENV
          else
            echo "No releasable changes found"
            echo "should-release=false" >> $GITHUB_ENV
          fi

      - name: Exit if no release needed
        if: env.should-release == 'false' && github.event.inputs.version == ''
        run: |
          echo "No releasable changes found and no version manually specified. Exiting."
          exit 0

      - name: Get next version
        id: next-version
        if: env.should-release == 'true' || github.event.inputs.version != ''
        run: |
          # Use provided version or calculate next version
          if [ -n "${{ github.event.inputs.version }}" ]; then
            NEXT_VERSION="${{ github.event.inputs.version }}"
          else
            # Get the latest server version tag
            LATEST_VERSION=$(git tag -l | grep "server@" | sort -V | tail -n1 || echo "server@0.1.0")
            # Use git cliff to determine next version
            if git rev-parse server@0.1.0 >/dev/null 2>&1; then
              NEXT_VERSION=$(git cliff --include-path "server/**/*" --config cliff.toml --repository "../" --bumped-version -- server@0.1.0..HEAD)
            else
              NEXT_VERSION=$(git cliff --include-path "server/**/*" --config cliff.toml --repository "../" --bumped-version)
            fi

            # If git cliff returns 0.1.0, increment from the latest version
            if [ "$NEXT_VERSION" = "0.1.0" ]; then
              # Extract version number from tag
              VERSION_NUMBER="${LATEST_VERSION#server@}"
              # Parse semver components
              IFS='.' read -r major minor patch <<< "$VERSION_NUMBER"
              # Increment minor version by default
              NEXT_VERSION="server@${major}.$((minor + 1)).0"
            else
              # If NEXT_VERSION doesn't have server@ prefix, add it
              if [[ "$NEXT_VERSION" != server@* ]]; then
                NEXT_VERSION="server@$NEXT_VERSION"
              fi
            fi
          fi

          # Debug output
          echo "NEXT_VERSION before output: $NEXT_VERSION"
          
          # Ensure we have a valid version
          if [[ -z "$NEXT_VERSION" ]] || [[ "$NEXT_VERSION" == "server@" ]]; then
            echo "Error: Invalid NEXT_VERSION"
            exit 1
          fi
          
          echo "NEXT_VERSION=$NEXT_VERSION" >> "$GITHUB_OUTPUT"
          # Extract just the version number without the 'server@' prefix for Docker tags
          VERSION_NUMBER="${NEXT_VERSION#server@}"
          echo "VERSION_NUMBER extracted: $VERSION_NUMBER"
          
          # Ensure we have a valid version number
          if [[ -z "$VERSION_NUMBER" ]] || [[ "$VERSION_NUMBER" == "$NEXT_VERSION" ]]; then
            echo "Error: Failed to extract version number from $NEXT_VERSION"
            exit 1
          fi
          
          echo "NEXT_VERSION_NUMBER=$VERSION_NUMBER" >> "$GITHUB_OUTPUT"
          echo "Next version: $NEXT_VERSION (Docker tag: $VERSION_NUMBER)"

      - name: Get release notes
        id: release-notes
        if: env.should-release == 'true' || github.event.inputs.version != ''
        run: |
          echo "RELEASE_NOTES<<EOF" >> "$GITHUB_OUTPUT"
          if git rev-parse server@0.1.0 >/dev/null 2>&1; then
            git cliff --include-path "server/**/*" --config cliff.toml --repository "../" --unreleased -- server@0.1.0..HEAD >> "$GITHUB_OUTPUT"
          else
            git cliff --include-path "server/**/*" --config cliff.toml --repository "../" --unreleased >> "$GITHUB_OUTPUT"
          fi
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Update CHANGELOG.md
        if: env.should-release == 'true' || github.event.inputs.version != ''
        run: |
          if git rev-parse server@0.1.0 >/dev/null 2>&1; then
            git cliff --include-path "server/**/*" --config cliff.toml --repository "../" --bump -o CHANGELOG.md -- server@0.1.0..HEAD
          else
            git cliff --include-path "server/**/*" --config cliff.toml --repository "../" --bump -o CHANGELOG.md
          fi

      # Build and push Docker image
      - name: Login to GitHub Container Registry
        if: env.should-release == 'true' || github.event.inputs.version != ''
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Image metadata
        id: meta
        if: env.should-release == 'true' || github.event.inputs.version != ''
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/tuist/tuist
          flavor: |
            latest=true
          tags: |
            type=raw,value=${{ steps.next-version.outputs.NEXT_VERSION_NUMBER }}
            type=raw,value=latest
          labels: |
            org.opencontainers.image.title=Tuist
            org.opencontainers.image.vendor=Tuist GmbH
            org.opencontainers.image.source=https://github.com/tuist/tuist

      - name: Build and push
        if: env.should-release == 'true' || github.event.inputs.version != ''
        uses: docker/build-push-action@v6
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            TUIST_HOSTED=0
            TUIST_VERSION=${{ steps.next-version.outputs.NEXT_VERSION_NUMBER }}
            MIX_ENV=prod
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          github-token: ${{ secrets.TUIST_RELEASE_GITHUB_TOKEN }}

      # Commit and tag
      - name: Commit changes
        if: env.should-release == 'true' || github.event.inputs.version != ''
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add CHANGELOG.md
          git commit -m "[Release] Tuist Server ${{ steps.next-version.outputs.NEXT_VERSION }}"
          git tag ${{ steps.next-version.outputs.NEXT_VERSION }}
          
          # Pull and rebase to avoid conflicts from concurrent releases
          max_attempts=5
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts"
            if git pull --rebase origin ${{ github.ref_name }}; then
              if git push origin ${{ github.ref_name }} && git push origin ${{ steps.next-version.outputs.NEXT_VERSION }}; then
                echo "Successfully pushed changes"
                break
              fi
            fi
            echo "Push failed, retrying in 5 seconds..."
            sleep 5
            attempt=$((attempt + 1))
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "Failed to push after $max_attempts attempts"
            exit 1
          fi

      # Create GitHub releases
      - name: Create GitHub Release
        if: env.should-release == 'true' || github.event.inputs.version != ''
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          repository: tuist/tuist
          name: ${{ steps.next-version.outputs.NEXT_VERSION }}
          tag_name: ${{ steps.next-version.outputs.NEXT_VERSION }}
          body: |
            ## Server Release

            ${{ steps.release-notes.outputs.RELEASE_NOTES }}

